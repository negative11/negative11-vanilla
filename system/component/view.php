<?php
/**
 * Hanldes assignment of template variables and generation of output
 * upon call by the controller.
 * 
 * @package core
 */
class View_Component
{	
	/**
	 * Holds all variable assignments supplied to the template.
	 * These are set/fetched/destroyed via the magical methods built in
	 * with PHP classes.
	 */
	protected $_data = array();
	
	/**
	 * Template to be loaded and output
	 */
	protected $template;
	
	/**
	 * Constructor.
	 * Brings supplied template into local member where it will await 
	 * a call to display_content.
	 */
	public function __construct($template)
	{
		$this->template = $template;
	}
	
	/**
	 * Assigns any template variable to $this->data array
	 * 
	 * @param mixed $name
	 * @param mixed $value
	 */
	public function __set($name, $value)
	{
		$this->_data[$name] = $value;
	}
	
	/**
	 * Fetches value of supplied template variable from $this->data 
	 * array
	 * 
	 * @param $name
	 * @return mixed
	 */
	public function __get($name)
	{
		if (isset($this->_data[$name]))
		{
			return $this->_data[$name];
		}
	}
	
	/**
	 * Returns whether specified template variable has a value
	 *
	 * @return bool
	 */
	public function __isset($name)
	{
		return (bool) array_key_exists($name, $this->_data);
	}
	
	public function __unset($name)
	{
		unset($this->_data[$name]);
	}
	
	/**
	 * Generates template output.
	 * Extracts $this->_data into local namespace so that it can be
	 * interpolated into the output generated by template.
	 */	
	public function display_content()
	{		
		// Search for the template
		$file = Loader::search('template', $this->template);
		
		// We need to fetch file manually to allow local variable namespace.
		if ($file !== FALSE)
		{
			// Get template variables into local namespace.
			extract($this->_data);
			require $file;
			
			return TRUE;
		}
		
		throw new Exception ('Invalid template name');
	}
	
	/**
	 * Returns template output so that it may be assigned to a variable
	 * rather than displayed directly. This is useful when you want to
	 * embed template content inside another template.
	 */
	public function get_content()
	{
		ob_start();
		$this->display_content();
		$content = ob_get_clean();
		return $content;
	}
}
